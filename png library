#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

// Fungsi untuk menyembunyikan pesan dalam gambar PNG
// Fungsi untuk menyembunyikan pesan dalam gambar PNG
void hideMessageInImage(const char* inputImagePath, const char* outputImagePath, const char* message) {
    FILE* inputFile = fopen(inputImagePath, "rb");
    if (inputFile == NULL) {
        printf("Gagal membuka file input.\n");
        return;
    }

    FILE* outputFile = fopen(outputImagePath, "wb");
    if (outputFile == NULL) {
        printf("Gagal membuka file output.\n");
        fclose(inputFile);
        return;
    }

    // Salin isi file input ke file output
    int c;
    while ((c = fgetc(inputFile)) != EOF) {
        fputc(c, outputFile);
    }

    fseek(outputFile, 0, SEEK_END); // Arahkan ke akhir file

    // Panjang pesan (dalam satu byte)
    uint32_t messageLength = strlen(message);
    fputc((messageLength >> 24) & 0xFF, outputFile);
    fputc((messageLength >> 16) & 0xFF, outputFile);
    fputc((messageLength >> 8) & 0xFF, outputFile);
    fputc(messageLength & 0xFF, outputFile);

    // Simpan pesan ke dalam gambar PNG
    for (int i = 0; i < messageLength; ++i) {
        uint8_t byte = message[i];
        for (int j = 7; j >= 0; --j) {
            int pixel = fgetc(outputFile);
            pixel = (pixel & 0xFE) | ((byte >> j) & 0x01); // Ubah LSB
            fseek(outputFile, -1, SEEK_CUR); // Kembali ke posisi sebelumnya
            fputc(pixel, outputFile);
        }
    }

    fclose(inputFile);
    fclose(outputFile);

    printf("Pesan berhasil disembunyikan dalam gambar PNG baru: %s\n", outputImagePath);
}

void extractMessageFromImage(const char* imagePath) {
    FILE* file = fopen(imagePath, "rb");
    if (file == NULL) {
        printf("Gagal membuka file input.\n");
        return;
    }

    // Lewati header PNG 8 byte
    fseek(file, 8, SEEK_SET);

    // Baca panjang pesan dari gambar
    uint32_t messageLength = 0;
    messageLength |= fgetc(file) << 24;
    messageLength |= fgetc(file) << 16;
    messageLength |= fgetc(file) << 8;
    messageLength |= fgetc(file);

    printf("Panjang pesan yang tersembunyi: %u\n", messageLength);

    // Baca pesan dari gambar
    printf("Pesan tersembunyi: ");
    for (uint32_t i = 0; i < messageLength; ++i) {
        uint8_t byte = 0;
        for (int j = 0; j < 8; ++j) {
            int pixel = fgetc(file);
            byte |= (pixel & 0x01) << (7 - j); // Ambil bit terakhir
        }
        printf("%c", byte);
    }
    printf("\n");

    fclose(file);
}




// Fungsi utama
int main() {
    int choice;
    char inputImagePath[100];
    char outputImagePath[100];
    char message[1000];

    do {
        printf("\nMenu:\n");
        printf("1. Sembunyikan Pesan dalam Gambar PNG\n");
        printf("2. Ekstrak Pesan dari Gambar PNG\n");
        printf("0. Keluar\n");
        printf("Pilih: ");
        scanf(" %d", &choice);

        switch (choice) {
            case 1:
                printf("Masukkan nama file gambar input (PNG): ");
                scanf("%s", inputImagePath);

                printf("Masukkan nama file gambar output (PNG): ");
                scanf("%s", outputImagePath);

                printf("Masukkan pesan yang akan disembunyikan: ");
                scanf(" %[^\n]", message);

                hideMessageInImage(inputImagePath, outputImagePath, message);
                printf("Pesan berhasil disembunyikan dalam gambar PNG.\n");
                break;
            case 2:
                printf("Masukkan nama file gambar input (PNG): ");
                scanf("%s", inputImagePath);

                printf("\n=== Ekstraksi Pesan ===\n");
                extractMessageFromImage(inputImagePath);
                break;
            case 0:
                printf("Terima kasih!\n");
                break;
            default:
                printf("Pilihan tidak valid. Silakan coba lagi.\n");
        }
    } while (choice != 0);

    return 0;
}
